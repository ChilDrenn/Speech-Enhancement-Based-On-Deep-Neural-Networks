Starting training:
without SE:
Namespace(batch_size=8, cut_len=32000, data_dir='/mnt/iusers01/msc-stu/hum-msc-data-sci-2024-2025/t74061zq/erp/DEMAND_16KHz', decay_epoch=12, epochs=50, init_lr=0.001, log_interval=500, loss_weights=[0.3, 0.7, 1.0, 0.01], save_model_dir='./saved_models_log/saved_models_20250726_VoiceDEMAND_16khz')
['NVIDIA A100-SXM4-80GB']
====================================================================================================
Layer (type:depth-idx)                             Output Shape              Param #
====================================================================================================
TSCNet                                             [1, 1, 321, 201]          --
├─DenseEncoder: 1-1                                [1, 64, 321, 101]         --
│    └─Sequential: 2-1                             [1, 64, 321, 201]         --
│    │    └─Conv2d: 3-1                            [1, 64, 321, 201]         256
│    │    └─InstanceNorm2d: 3-2                    [1, 64, 321, 201]         128
│    │    └─PReLU: 3-3                             [1, 64, 321, 201]         64
│    └─DilatedDenseNet: 2-2                        [1, 64, 321, 201]         --
│    │    └─ConstantPad2d: 3-4                     [1, 64, 322, 203]         --
│    │    └─Conv2d: 3-5                            [1, 64, 321, 201]         24,640
│    │    └─InstanceNorm2d: 3-6                    [1, 64, 321, 201]         128
│    │    └─PReLU: 3-7                             [1, 64, 321, 201]         64
│    │    └─ConstantPad2d: 3-8                     [1, 128, 323, 203]        --
│    │    └─Conv2d: 3-9                            [1, 64, 321, 201]         49,216
│    │    └─InstanceNorm2d: 3-10                   [1, 64, 321, 201]         128
│    │    └─PReLU: 3-11                            [1, 64, 321, 201]         64
│    │    └─ConstantPad2d: 3-12                    [1, 192, 325, 203]        --
│    │    └─Conv2d: 3-13                           [1, 64, 321, 201]         73,792
│    │    └─InstanceNorm2d: 3-14                   [1, 64, 321, 201]         128
│    │    └─PReLU: 3-15                            [1, 64, 321, 201]         64
│    │    └─ConstantPad2d: 3-16                    [1, 256, 329, 203]        --
│    │    └─Conv2d: 3-17                           [1, 64, 321, 201]         98,368
│    │    └─InstanceNorm2d: 3-18                   [1, 64, 321, 201]         128
│    │    └─PReLU: 3-19                            [1, 64, 321, 201]         64
│    └─Sequential: 2-3                             [1, 64, 321, 101]         --
│    │    └─Conv2d: 3-20                           [1, 64, 321, 101]         12,352
│    │    └─InstanceNorm2d: 3-21                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-22                            [1, 64, 321, 101]         64
├─TSCB: 1-2                                        [1, 64, 321, 101]         --
│    └─ConformerBlock: 2-4                         [101, 321, 64]            --
│    │    └─Scale: 3-23                            [101, 321, 64]            33,216
│    │    └─PreNorm: 3-24                          [101, 321, 64]            32,976
│    │    └─ConformerConvModule: 3-25              [101, 321, 64]            29,376
│    │    └─Scale: 3-26                            [101, 321, 64]            33,216
│    │    └─LayerNorm: 3-27                        [101, 321, 64]            128
│    └─ConformerBlock: 2-5                         [321, 101, 64]            --
│    │    └─Scale: 3-28                            [321, 101, 64]            33,216
│    │    └─PreNorm: 3-29                          [321, 101, 64]            32,976
│    │    └─ConformerConvModule: 3-30              [321, 101, 64]            29,376
│    │    └─Scale: 3-31                            [321, 101, 64]            33,216
│    │    └─LayerNorm: 3-32                        [321, 101, 64]            128
├─TSCB: 1-3                                        [1, 64, 321, 101]         --
│    └─ConformerBlock: 2-6                         [101, 321, 64]            --
│    │    └─Scale: 3-33                            [101, 321, 64]            33,216
│    │    └─PreNorm: 3-34                          [101, 321, 64]            32,976
│    │    └─ConformerConvModule: 3-35              [101, 321, 64]            29,376
│    │    └─Scale: 3-36                            [101, 321, 64]            33,216
│    │    └─LayerNorm: 3-37                        [101, 321, 64]            128
│    └─ConformerBlock: 2-7                         [321, 101, 64]            --
│    │    └─Scale: 3-38                            [321, 101, 64]            33,216
│    │    └─PreNorm: 3-39                          [321, 101, 64]            32,976
│    │    └─ConformerConvModule: 3-40              [321, 101, 64]            29,376
│    │    └─Scale: 3-41                            [321, 101, 64]            33,216
│    │    └─LayerNorm: 3-42                        [321, 101, 64]            128
├─TSCB: 1-4                                        [1, 64, 321, 101]         --
│    └─ConformerBlock: 2-8                         [101, 321, 64]            --
│    │    └─Scale: 3-43                            [101, 321, 64]            33,216
│    │    └─PreNorm: 3-44                          [101, 321, 64]            32,976
│    │    └─ConformerConvModule: 3-45              [101, 321, 64]            29,376
│    │    └─Scale: 3-46                            [101, 321, 64]            33,216
│    │    └─LayerNorm: 3-47                        [101, 321, 64]            128
│    └─ConformerBlock: 2-9                         [321, 101, 64]            --
│    │    └─Scale: 3-48                            [321, 101, 64]            33,216
│    │    └─PreNorm: 3-49                          [321, 101, 64]            32,976
│    │    └─ConformerConvModule: 3-50              [321, 101, 64]            29,376
│    │    └─Scale: 3-51                            [321, 101, 64]            33,216
│    │    └─LayerNorm: 3-52                        [321, 101, 64]            128
├─TSCB: 1-5                                        [1, 64, 321, 101]         --
│    └─ConformerBlock: 2-10                        [101, 321, 64]            --
│    │    └─Scale: 3-53                            [101, 321, 64]            33,216
│    │    └─PreNorm: 3-54                          [101, 321, 64]            32,976
│    │    └─ConformerConvModule: 3-55              [101, 321, 64]            29,376
│    │    └─Scale: 3-56                            [101, 321, 64]            33,216
│    │    └─LayerNorm: 3-57                        [101, 321, 64]            128
│    └─ConformerBlock: 2-11                        [321, 101, 64]            --
│    │    └─Scale: 3-58                            [321, 101, 64]            33,216
│    │    └─PreNorm: 3-59                          [321, 101, 64]            32,976
│    │    └─ConformerConvModule: 3-60              [321, 101, 64]            29,376
│    │    └─Scale: 3-61                            [321, 101, 64]            33,216
│    │    └─LayerNorm: 3-62                        [321, 101, 64]            128
├─MaskDecoder: 1-6                                 [1, 1, 321, 201]          --
│    └─DilatedDenseNet: 2-12                       [1, 64, 321, 101]         --
│    │    └─ConstantPad2d: 3-63                    [1, 64, 322, 103]         --
│    │    └─Conv2d: 3-64                           [1, 64, 321, 101]         24,640
│    │    └─InstanceNorm2d: 3-65                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-66                            [1, 64, 321, 101]         64
│    │    └─ConstantPad2d: 3-67                    [1, 128, 323, 103]        --
│    │    └─Conv2d: 3-68                           [1, 64, 321, 101]         49,216
│    │    └─InstanceNorm2d: 3-69                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-70                            [1, 64, 321, 101]         64
│    │    └─ConstantPad2d: 3-71                    [1, 192, 325, 103]        --
│    │    └─Conv2d: 3-72                           [1, 64, 321, 101]         73,792
│    │    └─InstanceNorm2d: 3-73                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-74                            [1, 64, 321, 101]         64
│    │    └─ConstantPad2d: 3-75                    [1, 256, 329, 103]        --
│    │    └─Conv2d: 3-76                           [1, 64, 321, 101]         98,368
│    │    └─InstanceNorm2d: 3-77                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-78                            [1, 64, 321, 101]         64
│    └─SPConvTranspose2d: 2-13                     [1, 64, 321, 202]         --
│    │    └─ConstantPad2d: 3-79                    [1, 64, 321, 103]         --
│    │    └─Conv2d: 3-80                           [1, 128, 321, 101]        24,704
│    └─Conv2d: 2-14                                [1, 1, 321, 201]          129
│    └─InstanceNorm2d: 2-15                        [1, 1, 321, 201]          2
│    └─PReLU: 2-16                                 [1, 1, 321, 201]          1
│    └─Conv2d: 2-17                                [1, 1, 321, 201]          2
│    └─PReLU: 2-18                                 [1, 201, 321]             201
├─ComplexDecoder: 1-7                              [1, 2, 321, 201]          --
│    └─DilatedDenseNet: 2-19                       [1, 64, 321, 101]         --
│    │    └─ConstantPad2d: 3-81                    [1, 64, 322, 103]         --
│    │    └─Conv2d: 3-82                           [1, 64, 321, 101]         24,640
│    │    └─InstanceNorm2d: 3-83                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-84                            [1, 64, 321, 101]         64
│    │    └─ConstantPad2d: 3-85                    [1, 128, 323, 103]        --
│    │    └─Conv2d: 3-86                           [1, 64, 321, 101]         49,216
│    │    └─InstanceNorm2d: 3-87                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-88                            [1, 64, 321, 101]         64
│    │    └─ConstantPad2d: 3-89                    [1, 192, 325, 103]        --
│    │    └─Conv2d: 3-90                           [1, 64, 321, 101]         73,792
│    │    └─InstanceNorm2d: 3-91                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-92                            [1, 64, 321, 101]         64
│    │    └─ConstantPad2d: 3-93                    [1, 256, 329, 103]        --
│    │    └─Conv2d: 3-94                           [1, 64, 321, 101]         98,368
│    │    └─InstanceNorm2d: 3-95                   [1, 64, 321, 101]         128
│    │    └─PReLU: 3-96                            [1, 64, 321, 101]         64
│    └─SPConvTranspose2d: 2-20                     [1, 64, 321, 202]         --
│    │    └─ConstantPad2d: 3-97                    [1, 64, 321, 103]         --
│    │    └─Conv2d: 3-98                           [1, 128, 321, 101]        24,704
│    └─InstanceNorm2d: 2-21                        [1, 64, 321, 202]         128
│    └─PReLU: 2-22                                 [1, 64, 321, 202]         64
│    └─Conv2d: 2-23                                [1, 2, 321, 201]          258
====================================================================================================
Total params: 1,834,833
Trainable params: 1,834,833
Non-trainable params: 0
Total mult-adds (G): 41.56
====================================================================================================
Input size (MB): 0.52
Forward/backward pass size (MB): 4856.40
Params size (MB): 7.34
Estimated Total Size (MB): 4864.25
====================================================================================================
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
Discriminator                            [1, 1]                    --
├─Sequential: 1-1                        [1, 1]                    --
│    └─Conv2d: 2-1                       [1, 16, 100, 160]         512
│    └─InstanceNorm2d: 2-2               [1, 16, 100, 160]         32
│    └─PReLU: 2-3                        [1, 16, 100, 160]         16
│    └─Conv2d: 2-4                       [1, 32, 50, 80]           8,192
│    └─InstanceNorm2d: 2-5               [1, 32, 50, 80]           64
│    └─PReLU: 2-6                        [1, 32, 50, 80]           32
│    └─Conv2d: 2-7                       [1, 64, 25, 40]           32,768
│    └─InstanceNorm2d: 2-8               [1, 64, 25, 40]           128
│    └─PReLU: 2-9                        [1, 64, 25, 40]           64
│    └─Conv2d: 2-10                      [1, 128, 12, 20]          131,072
│    └─InstanceNorm2d: 2-11              [1, 128, 12, 20]          256
│    └─PReLU: 2-12                       [1, 128, 12, 20]          128
│    └─AdaptiveMaxPool2d: 2-13           [1, 128, 1, 1]            --
│    └─Flatten: 2-14                     [1, 128]                  --
│    └─Linear: 2-15                      [1, 64]                   8,256
│    └─Dropout: 2-16                     [1, 64]                   --
│    └─PReLU: 2-17                       [1, 64]                   64
│    └─Linear: 2-18                      [1, 1]                    65
│    └─LearnableSigmoid: 2-19            [1, 1]                    1
==========================================================================================
Total params: 181,650
Trainable params: 181,650
Non-trainable params: 0
Total mult-adds (M): 19.67
==========================================================================================
Input size (MB): 0.52
Forward/backward pass size (MB): 11.49
Params size (MB): 0.73
Estimated Total Size (MB): 12.73
==========================================================================================
/mnt/iusers01/msc-stu/hum-msc-data-sci-2024-2025/t74061zq/erp/CMGAN_src/data/dataloader.py:52: UserWarning: torchaudio._backend.set_audio_backend has been deprecated. With dispatcher enabled, this function is no-op. You can remove the function call.
  torchaudio.set_audio_backend("sox_io")         # in linux
INFO:root:Epoch 0, Step 500, loss: 0.31360897421836853, disc_loss: 0.0363914854824543
INFO:root:Epoch 0, Step 1000, loss: 0.301178902387619, disc_loss: 0.0188396368175745
INFO:root:Generator loss: 0.21657897792394878, Discriminator loss: 0.009472753240012573
INFO:root:Epoch 1, Step 500, loss: 0.3008442223072052, disc_loss: 0.004164263140410185
INFO:root:Epoch 1, Step 1000, loss: 0.325029581785202, disc_loss: 0.007497597485780716
INFO:root:Generator loss: 0.1900306387433728, Discriminator loss: 0.010421043057311145
INFO:root:Epoch 2, Step 500, loss: 0.2537139356136322, disc_loss: 0.0038257152773439884
INFO:root:Epoch 2, Step 1000, loss: 0.25313013792037964, disc_loss: 0.0055007110349833965
INFO:root:Generator loss: 0.1802759821553832, Discriminator loss: 0.006122340154336783
INFO:root:Epoch 3, Step 500, loss: 0.20376726984977722, disc_loss: 0.009144572541117668
INFO:root:Epoch 3, Step 1000, loss: 0.2199161797761917, disc_loss: 0.006360785104334354
INFO:root:Generator loss: 0.18619328954266112, Discriminator loss: 0.011271074297837913
INFO:root:Epoch 4, Step 500, loss: 0.24101361632347107, disc_loss: 0.011431943625211716
INFO:root:Epoch 4, Step 1000, loss: 0.2426609843969345, disc_loss: 0.003320813411846757
INFO:root:Generator loss: 0.17331270765043, Discriminator loss: 0.008610023595890012
INFO:root:Epoch 5, Step 500, loss: 0.1872645914554596, disc_loss: 0.013134597800672054
INFO:root:Epoch 5, Step 1000, loss: 0.22048664093017578, disc_loss: 0.011459936387836933
INFO:root:Generator loss: 0.17286295067627452, Discriminator loss: 0.008372071846749958
INFO:root:Epoch 6, Step 500, loss: 0.1976308375597, disc_loss: 0.004369926173239946
INFO:root:Epoch 6, Step 1000, loss: 0.2819269299507141, disc_loss: 0.005662286654114723
INFO:root:Generator loss: 0.1665732158185209, Discriminator loss: 0.006604835839752216
INFO:root:Epoch 7, Step 500, loss: 0.24893143773078918, disc_loss: 0.002502019051462412
INFO:root:Epoch 7, Step 1000, loss: 0.20739172399044037, disc_loss: 0.007934639230370522
INFO:root:Generator loss: 0.16673394220257268, Discriminator loss: 0.010462094534604439
INFO:root:Epoch 8, Step 500, loss: 0.2456076741218567, disc_loss: 0.0065110819414258
INFO:root:Epoch 8, Step 1000, loss: 0.16864198446273804, disc_loss: 0.0017575343372300267
INFO:root:Generator loss: 0.16594955390228808, Discriminator loss: 0.01083535618415482
INFO:root:Epoch 9, Step 500, loss: 0.21829469501972198, disc_loss: 0.010348725132644176
INFO:root:Epoch 9, Step 1000, loss: 0.22227779030799866, disc_loss: 0.0011640713782981038
INFO:root:Generator loss: 0.15924346779735343, Discriminator loss: 0.005402553997237633
INFO:root:Epoch 10, Step 500, loss: 0.18128347396850586, disc_loss: 0.007438207510858774
INFO:root:Epoch 10, Step 1000, loss: 0.20140604674816132, disc_loss: 0.004059129394590855
INFO:root:Generator loss: 0.1550978197924142, Discriminator loss: 0.005061044324939908
INFO:root:Epoch 11, Step 500, loss: 0.22725164890289307, disc_loss: 0.0029202373698353767
INFO:root:Epoch 11, Step 1000, loss: 0.23303502798080444, disc_loss: 0.006221199408173561
INFO:root:Generator loss: 0.15309065862477406, Discriminator loss: 0.008545994724698582
INFO:root:Epoch 12, Step 500, loss: 0.16127067804336548, disc_loss: 0.0013312756782397628
INFO:root:Epoch 12, Step 1000, loss: 0.1629081815481186, disc_loss: 0.0015978214796632528
INFO:root:Generator loss: 0.1637810493991213, Discriminator loss: 0.006863505921995684
INFO:root:Epoch 13, Step 500, loss: 0.19618883728981018, disc_loss: 0.00340223778039217
INFO:root:Epoch 13, Step 1000, loss: 0.20722773671150208, disc_loss: 0.003681597299873829
INFO:root:Generator loss: 0.14839234152465192, Discriminator loss: 0.006475175216622216
INFO:root:Epoch 14, Step 500, loss: 0.17323145270347595, disc_loss: 0.001842537778429687
INFO:root:Epoch 14, Step 1000, loss: 0.20874853432178497, disc_loss: 0.0022255415096879005
INFO:root:Generator loss: 0.16306574432884605, Discriminator loss: 0.009234571987672628
INFO:root:Epoch 15, Step 500, loss: 0.17353364825248718, disc_loss: 0.0020991249475628138
INFO:root:Epoch 15, Step 1000, loss: 0.15448349714279175, disc_loss: 0.0008444666163995862
INFO:root:Generator loss: 0.16953867015618723, Discriminator loss: 0.005835269090100147
INFO:root:Epoch 16, Step 500, loss: 0.18702076375484467, disc_loss: 0.0022324081510305405
INFO:root:Epoch 16, Step 1000, loss: 0.19311679899692535, disc_loss: 0.0033595182467252016
INFO:root:Generator loss: 0.15057139930505198, Discriminator loss: 0.008595551072520394
INFO:root:Epoch 17, Step 500, loss: 0.20316369831562042, disc_loss: 0.0044980356469750404
INFO:root:Epoch 17, Step 1000, loss: 0.16582363843917847, disc_loss: 0.0025095813907682896
INFO:root:Generator loss: 0.15438690897330498, Discriminator loss: 0.005556033828151096
INFO:root:Epoch 18, Step 500, loss: 0.2200884073972702, disc_loss: 0.009999650530517101
INFO:root:Epoch 18, Step 1000, loss: 0.18440154194831848, disc_loss: 0.0022656135261058807
INFO:root:Generator loss: 0.16164012405189496, Discriminator loss: 0.007422618527254722
INFO:root:Epoch 19, Step 500, loss: 0.1650342047214508, disc_loss: 0.0023822104558348656
INFO:root:Epoch 19, Step 1000, loss: 0.15774182975292206, disc_loss: 0.0010494274320080876
INFO:root:Generator loss: 0.15360421911605354, Discriminator loss: 0.005917969117397713
INFO:root:Epoch 20, Step 500, loss: 0.21356084942817688, disc_loss: 0.0012167058885097504
INFO:root:Epoch 20, Step 1000, loss: 0.19156111776828766, disc_loss: 0.002061819890514016
INFO:root:Generator loss: 0.1487904133871921, Discriminator loss: 0.008843334699705135
INFO:root:Epoch 21, Step 500, loss: 0.1702539473772049, disc_loss: 0.0010320630390197039
INFO:root:Epoch 21, Step 1000, loss: 0.2547737658023834, disc_loss: 0.0027865746524184942
INFO:root:Generator loss: 0.1476631504528731, Discriminator loss: 0.005268110216649484
INFO:root:Epoch 22, Step 500, loss: 0.15550623834133148, disc_loss: 0.0011560175335034728
INFO:root:Epoch 22, Step 1000, loss: 0.16437314450740814, disc_loss: 0.00321613228879869
INFO:root:Generator loss: 0.15457231037825056, Discriminator loss: 0.005402961732860366
INFO:root:Epoch 23, Step 500, loss: 0.1648685336112976, disc_loss: 0.001663156202994287
INFO:root:Epoch 23, Step 1000, loss: 0.17695215344429016, disc_loss: 0.0037044899072498083
INFO:root:Generator loss: 0.14823027808689376, Discriminator loss: 0.005156436906811031
INFO:root:Epoch 24, Step 500, loss: 0.17307643592357635, disc_loss: 0.004644399043172598
INFO:root:Epoch 24, Step 1000, loss: 0.19228166341781616, disc_loss: 0.003232039511203766
INFO:root:Generator loss: 0.15235963174440328, Discriminator loss: 0.007988506662478507
INFO:root:Epoch 25, Step 500, loss: 0.20682786405086517, disc_loss: 0.001476910663768649
INFO:root:Epoch 25, Step 1000, loss: 0.21475528180599213, disc_loss: 0.012205848470330238
INFO:root:Generator loss: 0.15196647900111468, Discriminator loss: 0.005512686420313435
INFO:root:Epoch 26, Step 500, loss: 0.20396512746810913, disc_loss: 0.0009448807104490697
INFO:root:Epoch 26, Step 1000, loss: 0.17962098121643066, disc_loss: 0.0012208021944388747
INFO:root:Generator loss: 0.1491017364037847, Discriminator loss: 0.005147067090220641
INFO:root:Epoch 27, Step 500, loss: 0.16175872087478638, disc_loss: 0.0007788051734678447
INFO:root:Epoch 27, Step 1000, loss: 0.24355877935886383, disc_loss: 0.0014190649380907416
INFO:root:Generator loss: 0.15263839818320227, Discriminator loss: 0.006354777277187327
INFO:root:Epoch 28, Step 500, loss: 0.1799178272485733, disc_loss: 0.0007821014733053744
INFO:root:Epoch 28, Step 1000, loss: 0.17210997641086578, disc_loss: 0.0015159078175202012
INFO:root:Generator loss: 0.14736758577592166, Discriminator loss: 0.005749377663907351
INFO:root:Epoch 29, Step 500, loss: 0.16694676876068115, disc_loss: 0.001593427499756217
INFO:root:Epoch 29, Step 1000, loss: 0.19372431933879852, disc_loss: 0.0018081890884786844
INFO:root:Generator loss: 0.1483809998602543, Discriminator loss: 0.005980645321666724
INFO:root:Epoch 30, Step 500, loss: 0.20315447449684143, disc_loss: 0.002290004398673773
INFO:root:Epoch 30, Step 1000, loss: 0.1644139140844345, disc_loss: 0.006859983783215284
INFO:root:Generator loss: 0.1480144659437022, Discriminator loss: 0.0068197668418717725
INFO:root:Epoch 31, Step 500, loss: 0.19461512565612793, disc_loss: 0.0021612790878862143
INFO:root:Epoch 31, Step 1000, loss: 0.16661173105239868, disc_loss: 0.002507668687030673
INFO:root:Generator loss: 0.1481690382205167, Discriminator loss: 0.007124085530855702
INFO:root:Epoch 32, Step 500, loss: 0.1545165330171585, disc_loss: 0.0016593001782894135
INFO:root:Epoch 32, Step 1000, loss: 0.1807069182395935, disc_loss: 0.0017687005456537008
INFO:root:Generator loss: 0.14946637483476435, Discriminator loss: 0.005804896109977068
INFO:root:Epoch 33, Step 500, loss: 0.2490316480398178, disc_loss: 0.001383802737109363
INFO:root:Epoch 33, Step 1000, loss: 0.15363170206546783, disc_loss: 0.001598047325387597
INFO:root:Generator loss: 0.15443265647853463, Discriminator loss: 0.007695714328257205
INFO:root:Epoch 34, Step 500, loss: 0.15870030224323273, disc_loss: 0.0006707065622322261
INFO:root:Epoch 34, Step 1000, loss: 0.11823943257331848, disc_loss: 0.0021383457351475954
INFO:root:Generator loss: 0.15056855716172932, Discriminator loss: 0.008229698411932721
INFO:root:Epoch 35, Step 500, loss: 0.197893425822258, disc_loss: 0.0019400231540203094
INFO:root:Epoch 35, Step 1000, loss: 0.17544005811214447, disc_loss: 0.0017295380821451545
INFO:root:Generator loss: 0.14802878697230978, Discriminator loss: 0.005698954986602755
INFO:root:Epoch 36, Step 500, loss: 0.16117338836193085, disc_loss: 0.0012015148531645536
INFO:root:Epoch 36, Step 1000, loss: 0.1776532232761383, disc_loss: 0.001563466270454228
INFO:root:Generator loss: 0.14825698885234814, Discriminator loss: 0.005234790712669017
INFO:root:Epoch 37, Step 500, loss: 0.19837170839309692, disc_loss: 0.0008087384630925953
INFO:root:Epoch 37, Step 1000, loss: 0.14552335441112518, disc_loss: 0.00105511792935431
INFO:root:Generator loss: 0.1544304356991666, Discriminator loss: 0.006691827020580763
INFO:root:Epoch 38, Step 500, loss: 0.1531364619731903, disc_loss: 0.0009360255789943039
INFO:root:Epoch 38, Step 1000, loss: 0.20079845190048218, disc_loss: 0.001894475775770843
INFO:root:Generator loss: 0.15173560655811458, Discriminator loss: 0.006116920843657142
INFO:root:Epoch 39, Step 500, loss: 0.2752521336078644, disc_loss: 0.00047969986917451024
INFO:root:Epoch 39, Step 1000, loss: 0.15988820791244507, disc_loss: 0.0008119394769892097
INFO:root:Generator loss: 0.14603216844855002, Discriminator loss: 0.005997194797512669
INFO:root:Epoch 40, Step 500, loss: 0.16741415858268738, disc_loss: 0.002620532875880599
INFO:root:Epoch 40, Step 1000, loss: 0.14399437606334686, disc_loss: 0.0015840851701796055
INFO:root:Generator loss: 0.14866664441465174, Discriminator loss: 0.0061402931036337195
INFO:root:Epoch 41, Step 500, loss: 0.1721673607826233, disc_loss: 0.000637499731965363
INFO:root:Epoch 41, Step 1000, loss: 0.16644516587257385, disc_loss: 0.0013376103015616536
INFO:root:Generator loss: 0.14845351231040307, Discriminator loss: 0.005103835946816987
INFO:root:Epoch 42, Step 500, loss: 0.18947848677635193, disc_loss: 0.0008158818236552179
INFO:root:Epoch 42, Step 1000, loss: 0.17120495438575745, disc_loss: 0.0014428768772631884
INFO:root:Generator loss: 0.1474418246630326, Discriminator loss: 0.006147370502483823
INFO:root:Epoch 43, Step 500, loss: 0.1882040649652481, disc_loss: 0.0006682813400402665
INFO:root:Epoch 43, Step 1000, loss: 0.1573558747768402, disc_loss: 0.002168066566810012
INFO:root:Generator loss: 0.14904914130863633, Discriminator loss: 0.007522255451264746
INFO:root:Epoch 44, Step 500, loss: 0.17886923253536224, disc_loss: 0.0027171263936907053
INFO:root:Epoch 44, Step 1000, loss: 0.1727309376001358, disc_loss: 0.0009720780071802437
INFO:root:Generator loss: 0.14799571695547659, Discriminator loss: 0.006920421701173289
INFO:root:Epoch 45, Step 500, loss: 0.24515968561172485, disc_loss: 0.0012382909189909697
INFO:root:Epoch 45, Step 1000, loss: 0.16345277428627014, disc_loss: 0.0003016905393451452
INFO:root:Generator loss: 0.14670669446581774, Discriminator loss: 0.006297248535454996
INFO:root:Epoch 46, Step 500, loss: 0.14429634809494019, disc_loss: 0.0007139393710531294
INFO:root:Epoch 46, Step 1000, loss: 0.12097495794296265, disc_loss: 0.0032539188396185637
INFO:root:Generator loss: 0.14899398798792107, Discriminator loss: 0.008662476149518766
INFO:root:Epoch 47, Step 500, loss: 0.1581115424633026, disc_loss: 0.0025292052887380123
INFO:root:Epoch 47, Step 1000, loss: 0.18106822669506073, disc_loss: 0.0010434008436277509
INFO:root:Generator loss: 0.15038502411645593, Discriminator loss: 0.005705125237424017
INFO:root:Epoch 48, Step 500, loss: 0.14193707704544067, disc_loss: 0.0015768365701660514
INFO:root:Epoch 48, Step 1000, loss: 0.18794085085391998, disc_loss: 0.0004463746154215187
INFO:root:Generator loss: 0.15217448373153372, Discriminator loss: 0.006133080984847801
INFO:root:Epoch 49, Step 500, loss: 0.1844533383846283, disc_loss: 0.0013808828080073
INFO:root:Epoch 49, Step 1000, loss: 0.18326029181480408, disc_loss: 0.005391561891883612
INFO:root:Generator loss: 0.14932387531961053, Discriminator loss: 0.005968041131691103
Training finished.
Starting batch evaluation...
Evaluating: CMGAN_epoch_0_0.216
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  2.6275064093106 csig:  4.068824631064461 cbak:  3.3546069073488662 covl:  3.3970839278161398 ssnr:  7.967342306455658 stoi:  0.934343412297947


Evaluating: CMGAN_epoch_10_0.155
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.117252081053928 csig:  4.4400561265988285 cbak:  3.7553576247666616 covl:  3.8503074505778567 ssnr:  10.434332568438494 stoi:  0.9506441088094216


Evaluating: CMGAN_epoch_1_0.190
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  2.727757456956558 csig:  4.220768009456181 cbak:  3.4725356156058607 covl:  3.530777112162982 ssnr:  9.00070798313043 stoi:  0.9408144187248031


Evaluating: CMGAN_epoch_11_0.153
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.0792716821131196 csig:  4.404666124017852 cbak:  3.749054645025272 covl:  3.808091993019432 ssnr:  10.627698473337539 stoi:  0.9502197177798273


Evaluating: CMGAN_epoch_12_0.163
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.186700097276169 csig:  4.43576105116501 cbak:  3.7461946558148456 covl:  3.8853803697307794 ssnr:  9.880960694317537 stoi:  0.9525002911533222


Evaluating: CMGAN_epoch_13_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.190640031134041 csig:  4.461582651384607 cbak:  3.8168718511013005 covl:  3.90243874661962 ssnr:  10.845864323210659 stoi:  0.9522629241478554


Evaluating: CMGAN_epoch_14_0.163
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.184253557793145 csig:  4.414375116571799 cbak:  3.747732789328788 covl:  3.8733282708940036 ssnr:  9.933883279179172 stoi:  0.9531030753293755


Evaluating: CMGAN_epoch_15_0.169
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2162793465320347 csig:  4.417174734924985 cbak:  3.731534960761547 covl:  3.8933620616113322 ssnr:  9.452009405330319 stoi:  0.952076083887701


Evaluating: CMGAN_epoch_16_0.150
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.211210324636941 csig:  4.484673911042795 cbak:  3.815899272177081 covl:  3.925109108301403 ssnr:  10.687527219541789 stoi:  0.9531384582481058


Evaluating: CMGAN_epoch_17_0.154
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2115053245164815 csig:  4.455468831611143 cbak:  3.800600337871052 covl:  3.9141817815616973 ssnr:  10.471642670385702 stoi:  0.9526944234580437


Evaluating: CMGAN_epoch_18_0.161
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.266062143068869 csig:  4.46860226302822 cbak:  3.7867318407229127 covl:  3.949282279057815 ssnr:  9.920197793088887 stoi:  0.9522918712919819


Evaluating: CMGAN_epoch_19_0.153
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2572312281259057 csig:  4.468477239905084 cbak:  3.819827793406868 covl:  3.944422051347182 ssnr:  10.446768378233529 stoi:  0.9546516225724474


Evaluating: CMGAN_epoch_20_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.282728079597927 csig:  4.499950187025248 cbak:  3.854323643852138 covl:  3.9755131251239626 ssnr:  10.738591359779479 stoi:  0.9541248340501369


Evaluating: CMGAN_epoch_2_0.180
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  2.902916126604219 csig:  4.318313062276367 cbak:  3.585316553019472 covl:  3.667399100238854 ssnr:  9.419290468162336 stoi:  0.9435035857523584


Evaluating: CMGAN_epoch_21_0.147
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2434348546474885 csig:  4.472596135741031 cbak:  3.839529917461819 covl:  3.9365990328724596 ssnr:  10.802578404988752 stoi:  0.9550775188464404


Evaluating: CMGAN_epoch_22_0.154
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2178669574769954 csig:  4.483398771941878 cbak:  3.797748715352017 covl:  3.928949486521403 ssnr:  10.436697484350828 stoi:  0.9545617035433803


Evaluating: CMGAN_epoch_23_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.23294004551994 csig:  4.453961141906429 cbak:  3.831864629381791 covl:  3.9220316864324323 ssnr:  10.766698561063448 stoi:  0.9546022082180754


Evaluating: CMGAN_epoch_24_0.152
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2645190669205584 csig:  4.4861740729049675 cbak:  3.8300688378006016 covl:  3.9614302423761414 ssnr:  10.534816332183548 stoi:  0.9540818480503481


Evaluating: CMGAN_epoch_25_0.151
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.256653628737024 csig:  4.500617780385712 cbak:  3.824577775681482 covl:  3.9608491544553615 ssnr:  10.50403672592903 stoi:  0.9548334339283467


Evaluating: CMGAN_epoch_26_0.149
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2810163768460447 csig:  4.504466420290452 cbak:  3.8484990741772753 covl:  3.9762973120817233 ssnr:  10.705738904731403 stoi:  0.9548443719273758


Evaluating: CMGAN_epoch_27_0.152
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.272087216666601 csig:  4.504353150475233 cbak:  3.8277970618414936 covl:  3.9725426224022655 ssnr:  10.455955502563517 stoi:  0.9545132964776649


Evaluating: CMGAN_epoch_28_0.147
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2749263959602244 csig:  4.478067549588968 cbak:  3.8557382909631537 covl:  3.9602931682319937 ssnr:  10.830824892500669 stoi:  0.9547514655131584


Evaluating: CMGAN_epoch_29_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2370106320358016 csig:  4.4912995126420014 cbak:  3.831478726046233 covl:  3.9425823531438917 ssnr:  10.770546818609594 stoi:  0.9557949917098885


Evaluating: CMGAN_epoch_30_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2836246251770596 csig:  4.482617641943398 cbak:  3.8500064613647176 covl:  3.9686086197076005 ssnr:  10.671667640242067 stoi:  0.9548234881247282


Evaluating: CMGAN_epoch_3_0.186
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  2.8751860833862453 csig:  4.275893091852384 cbak:  3.549102251461158 covl:  3.6392860014324984 ssnr:  9.0973465824945 stoi:  0.9447824391787878


Evaluating: CMGAN_epoch_31_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2363922373183724 csig:  4.490006251993565 cbak:  3.8323583051927312 covl:  3.945793142207137 ssnr:  10.755908628423665 stoi:  0.9554005206323167


Evaluating: CMGAN_epoch_32_0.149
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.212494489492722 csig:  4.45712323608374 cbak:  3.8202528164110565 covl:  3.9154108676502024 ssnr:  10.74777339427237 stoi:  0.9549692618983806


Evaluating: CMGAN_epoch_33_0.154
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2650743485654443 csig:  4.471724430338179 cbak:  3.819912364100892 covl:  3.952975404706365 ssnr:  10.425327367815722 stoi:  0.9546589570925346


Evaluating: CMGAN_epoch_34_0.150
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2305998039766424 csig:  4.500342871567124 cbak:  3.8241544797093416 covl:  3.9505773731220777 ssnr:  10.678278618208415 stoi:  0.954937284846847


Evaluating: CMGAN_epoch_35_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2595311325151943 csig:  4.494602410271195 cbak:  3.8486623947358383 covl:  3.9616690855429577 ssnr:  10.841190901280443 stoi:  0.955294607769904


Evaluating: CMGAN_epoch_36_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.282303338924658 csig:  4.5178712654055175 cbak:  3.853257223232709 covl:  3.9872540618817114 ssnr:  10.753332124995605 stoi:  0.9560076107087513


Evaluating: CMGAN_epoch_37_0.154
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.303499475121498 csig:  4.500706177216407 cbak:  3.835580725631246 covl:  3.989060341495119 ssnr:  10.34894727042346 stoi:  0.9552104477907364


Evaluating: CMGAN_epoch_38_0.151
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.303107024251836 csig:  4.529735793376473 cbak:  3.844821955061775 covl:  4.004869575302954 ssnr:  10.477366390237865 stoi:  0.9553578608876447


Evaluating: CMGAN_epoch_39_0.146
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2761356846510785 csig:  4.502043849141376 cbak:  3.8574511692177755 covl:  3.9751700926746256 ssnr:  10.841036760020003 stoi:  0.9556018498177686


Evaluating: CMGAN_epoch_40_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2736426957891984 csig:  4.517315903990421 cbak:  3.846811425841927 covl:  3.983198834011275 ssnr:  10.700257410007618 stoi:  0.9557221251639612


Evaluating: CMGAN_epoch_4_0.173
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  2.902749923826421 csig:  4.284730578726658 cbak:  3.6090193287917414 covl:  3.657787073078314 ssnr:  9.753387516718794 stoi:  0.9462477794542064


Evaluating: CMGAN_epoch_41_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.297790460939546 csig:  4.511011735021058 cbak:  3.8577886445749456 covl:  3.9927721704004675 ssnr:  10.702607891554381 stoi:  0.9553203020042412


Evaluating: CMGAN_epoch_42_0.147
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.262568693282535 csig:  4.489636256711899 cbak:  3.849255729142862 covl:  3.9603666794773082 ssnr:  10.820735189723647 stoi:  0.9558215973385815


Evaluating: CMGAN_epoch_43_0.149
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2481235696852786 csig:  4.482762841280714 cbak:  3.8293157564239864 covl:  3.9479756429795807 ssnr:  10.616321941899207 stoi:  0.9559637043122895


Evaluating: CMGAN_epoch_44_0.147
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.277499972471913 csig:  4.517148267800654 cbak:  3.85285755184492 covl:  3.983913048373294 ssnr:  10.794126736458095 stoi:  0.955700161174618


Evaluating: CMGAN_epoch_45_0.146
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.3016144371437797 csig:  4.523027384799566 cbak:  3.869586489604829 covl:  4.002759499653561 ssnr:  10.844505670506232 stoi:  0.9554029230501556


Evaluating: CMGAN_epoch_46_0.148
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2917205859156486 csig:  4.506815616736272 cbak:  3.8533612268925634 covl:  3.9876850691397268 ssnr:  10.678313020111943 stoi:  0.955432774110749


Evaluating: CMGAN_epoch_47_0.150
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.332840969984971 csig:  4.552127207803956 cbak:  3.8671368438855396 covl:  4.033826114451252 ssnr:  10.615116379770983 stoi:  0.9551652398108503


Evaluating: CMGAN_epoch_48_0.152
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.287210795630529 csig:  4.5053577562204525 cbak:  3.841080676973795 covl:  3.98193859374949 ssnr:  10.53526117093318 stoi:  0.9555764707296891


Evaluating: CMGAN_epoch_49_0.149
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.2695220765268918 csig:  4.505506239869705 cbak:  3.841809325714168 covl:  3.972891854586031 ssnr:  10.669760374270647 stoi:  0.956044307027686


Evaluating: CMGAN_epoch_5_0.172
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.080427187305052 csig:  4.409418668021857 cbak:  3.663253427162641 covl:  3.811850545343837 ssnr:  9.272509881050619 stoi:  0.9451772902719848


Evaluating: CMGAN_epoch_6_0.166
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.0366407647294906 csig:  4.317878359619338 cbak:  3.6725971555212866 covl:  3.7425619485202013 ssnr:  9.786260190483748 stoi:  0.9474093588337623


Evaluating: CMGAN_epoch_7_0.166
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.017213304933992 csig:  4.330307960756068 cbak:  3.6690855355403706 covl:  3.740805933115631 ssnr:  9.871238512906329 stoi:  0.9490902379762401


Evaluating: CMGAN_epoch_8_0.165
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.0430827165402254 csig:  4.380918701903788 cbak:  3.6768502487710335 covl:  3.7817178678402295 ssnr:  9.82624223665824 stoi:  0.9507511290711973


Evaluating: CMGAN_epoch_9_0.159
evaluation.py:77: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict((torch.load(model_path)))
pesq:  3.0569320099735724 csig:  4.274801383906022 cbak:  3.714329585605662 covl:  3.726628320695348 ssnr:  10.256380133379771 stoi:  0.9492855880974461


